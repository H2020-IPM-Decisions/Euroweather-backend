#!/usr/bin/python3
"""
    Copyright (C) 2023  Johannes Tobiassen Langvatn, Met Norway

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import subprocess
import logging
from datetime import timedelta, date
from config_and_logger import init_logging, init_config

logger = logging.getLogger(__name__)
init_logging(logger)
CONFIG = init_config()

reftime = date.today() - timedelta(days=1)
day_before = date.today() - timedelta(days=2)
reftime = reftime.strftime("%Y%m%d")

base_path = CONFIG.get("base_path")
archive_cycles = CONFIG.get("archive_cycles")
main_cycles = CONFIG.get("main_cycles")
OUTDIR = base_path + "outdir/"

# Very ugly code to construct a daily archive:
# First normal case for same day forecast
for cycle in main_cycles:
    if int(cycle) + len(archive_cycles) >= 24:
        continue
    # Since we only use main cycles, we need 6 files per cycle: 1-7
    for hour in archive_cycles:
        subprocess.run(f"cat {OUTDIR}grib/*{reftime}{cycle}*{hour}*.grib2 >> " +
                       f"{OUTDIR}daily_archive_{reftime}.grib2", shell=True, check=True)

# Edge case for first hour of archive day, (longest cycle-hour from yesterdays last main cycle)
subprocess.run(f"cat {OUTDIR}grib/*{day_before}{main_cycles[-1]}*{archive_cycles[-1]}*.grib2 >> " +
               f"{OUTDIR}daily_archive_{reftime}.grib2", shell=True, check=True)

# Edge case for last hours of archive day, (exluding last forecast hour from yesterdays last cycle)
for hour in archive_cycles[:-1]:
    subprocess.run(f"cat {OUTDIR}grib/*{reftime}{main_cycles[-1]}*{hour}*.grib2 >> " +
                   f"{OUTDIR}daily_archive_{reftime}.grib2", shell=True, check=True)


# Convert to daily_archive to NETCDF
subprocess.run(f"fimex --input.file {OUTDIR}daily_archive_{reftime}.grib2 --input.config " +
               f"{base_path}cdmGribReaderConfig.xml --output.file {OUTDIR}daily_archive_{reftime}.nc",
               shell=True, check=True)
